{"version":3,"sources":["assets/imgs/AnakinSkywalker.png","assets/imgs/ReySkywalker.png","assets/imgs/HanSolo.png","assets/imgs/LeiaOrgana.png","assets/imgs/Yoda.png","store.js","components/new-post/new-post.js","components/post-list/post-list.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","img","posts","id","author","name","photo","AnakinSkywalker","nickname","date","content","text","picture","comments","total","commented","likes","liked","shares","shared","ReySkywalker","HanSolo","LeiaOrgana","Yoda","createStore","state","action","type","map","post","Object","assign","connect","authors","reduce","acc","curr","includes","push","totalPosts","length","dispatch","add","useState","setAuthor","contentText","setContentText","contentPicture","setContentPicture","setPost","className","onSubmit","e","today","Date","newPost","getDate","getMonth","getFullYear","preventDefault","submitValue","value","onChange","selectedAuthor","filter","x","target","key","placeholder","disabled","toComment","toShare","toLike","src","style","display","size","icon","line","onClick","color","faRetweet","faHeart","faSignOutAlt","transform","App","store","flexDirection","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.541f86e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/AnakinSkywalker.43608ebb.png\";","module.exports = __webpack_public_path__ + \"static/media/ReySkywalker.4d9df190.png\";","module.exports = __webpack_public_path__ + \"static/media/HanSolo.0966b1f7.png\";","module.exports = __webpack_public_path__ + \"static/media/LeiaOrgana.1196af32.png\";","module.exports = __webpack_public_path__ + \"static/media/Yoda.dc98a3af.png\";","import { createStore } from 'redux';\n\n//fake-data\nimport AnakinSkywalker from './assets/imgs/AnakinSkywalker.png'\nimport ReySkywalker from './assets/imgs/ReySkywalker.png'\nimport HanSolo from './assets/imgs/HanSolo.png'\nimport LeiaOrgana from './assets/imgs/LeiaOrgana.png'\nimport Yoda from './assets/imgs/Yoda.png'\n\nconst img = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/0x0.jpg?fit=scale\";\nconst leiaPost = 'https://vignette.wikia.nocookie.net/starwars/images/0/04/Leia_and_Sabine_-_FoD.png/revision/latest?cb=20170710115507';\nconst reyPost = 'https://vignette.wikia.nocookie.net/starwars/images/b/b4/Hellhound_Two_interior.png/revision/latest?cb=20180130193728';\nconst hanPost = 'https://vignette.wikia.nocookie.net/starwars/images/8/80/Han1_edited.jpg/revision/latest?cb=20090605140836';\nconst yodaPost = 'https://vignette.wikia.nocookie.net/starwars/images/e/ee/FiveFamousJediContinueToFailToDetectTheSith-AotC.jpg/revision/latest?cb=20060202113336';\n\n//fake-posts\nconst posts = [\n        {   \n            id: 0,\n            author: { name: 'Anakin Skywalker', photo: AnakinSkywalker, nickname:'@dart_vader' },\n            date: '21-April-2020',\n            content:{text: 'WTF? Who is ray? Why she is Skywalker? Luke..?', picture: img},\n            comments: {total: 150, commented: false},\n            likes: { total: 100, liked: false,},\n            shares: {total: 300, shared: false}\n        },\n        {   \n            id: 1,\n            author:{name: 'Rey Skywalker', photo: ReySkywalker, nickname:'@rey_skywalker' },\n            date: '21-April-2020',\n            content:{text: 'We will see each other again. I believe that.', picture: reyPost},\n            comments: {total: 482, commented: false},\n            likes: { total: 887, liked: false,},\n            shares: {total: 146, shared: true}\n        },\n        {   \n            id: 2,\n            author:{name: 'Han Solo', photo: HanSolo, nickname:'@han_solo' },\n            date: '21-April-2020',\n            content:{text: 'Never tell me the odds!', picture: hanPost},\n            comments: {total: 150, commented: true},\n            likes: { total: 100, liked: true,},\n            shares: {total: 300, shared: false}\n        },\n        {   \n            id: 3,\n            author: { name: 'Anakin Skywalker', photo: AnakinSkywalker, nickname:'@dart_vader' },\n            date: '22-April-2020',\n            content:{text: 'I am lost help', picture: img},\n            comments: {total: 910, commented: false},\n            likes: { total: 210, liked: true,},\n            shares: {total: 130, shared: true}\n        },\n        {   \n            id: 4,\n            author: { name: 'Leia Organa', photo: LeiaOrgana, nickname:'@the_princess' },\n            date: '22-April-2020',\n            content:{text: 'Everything you do, everywhere you go, you have the hope of a galaxy with you', picture: leiaPost},\n            comments: {total: 610, commented: false},\n            likes: { total: 101, liked: true,},\n            shares: {total: 230, shared: true}\n        },\n        {   \n            id: 5,\n            author: { name: 'Yoda', photo: Yoda, nickname:'@yoda_master' },\n            date: '22-April-2020',\n            content:{text: 'For 800 years have I trained Jedi.\"', picture: yodaPost},\n            comments: {total: 1000, commented: true},\n            likes: { total: 133, liked: false,},\n            shares: {total: 315, shared: true}\n        },\n];\n\nconst reducerPosts = ( state = posts, action ) => {\n    switch(action.type){\n        case 'TO_COMMENT':\n            return [\n                ...state.map(post => {\n                    if(post.id === action.post.id){\n                        post = Object.assign(post, post.comments.commented = !post.comments.commented);\n                        return (post.comments.commented) ? Object.assign(post, post.comments.total += 1) : Object.assign(post, post.comments.total -= 1)\n                    }\n                    return post;\n                })\n            ]\n\n        case 'TO_SHARE':\n            return [\n                ...state.map(post => {\n                    if(post.id === action.post.id){\n                        post = Object.assign(post, post.shares.shared = !post.shares.shared);\n                        return (post.shares.shared) ? Object.assign(post, post.shares.total += 1) : Object.assign(post, post.shares.total -= 1)\n                    }\n                    return post;\n                })\n            ]\n\n        case 'TO_LIKE':\n            return [\n                ...state.map(post => {\n                    if(post.id === action.post.id){\n                        post = Object.assign(post, post.likes.liked = !post.likes.liked);\n                        return (post.likes.liked) ? Object.assign(post, post.likes.total += 1) : Object.assign(post, post.likes.total -= 1)\n                    }\n                    return post;\n                })\n            ]\n        \n        case 'ADD_POST':\n            // console.log({...action.post});\n            return [ \n                ...state, \n                { \n                    ...action.post \n                } \n            ]\n    }\n    return state;\n};\n\nexport default createStore(reducerPosts)\n\n\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport './styles.css';\n\nconst NewPost = ({authors, totalPosts, add }) => {\n    const [ author, setAuthor ] = useState({...authors[0]})\n    const [ contentText, setContentText ] = useState('')\n    const [ contentPicture, setContentPicture ] = useState('')\n    const [ post, setPost ] = useState({})\n\n    function updateAuthorValue(e){\n        const selectedAuthor = authors.filter(x => x.name === e.target.value);\n        setAuthor(selectedAuthor[0])\n    }\n    function updateContentTextValue(e){\n        setContentText(e.target.value)\n    }\n    function updateContentPictureValue(e){\n        setContentPicture(e.target.value)\n    }\n\n    function submitValue(e){\n        const today = new Date();\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        const newPost = {\n            id: totalPosts,\n            author,\n            date: `${today.getDate()}-${monthNames[today.getMonth()]}-${today.getFullYear()}`,\n            content: {text: contentText, 'picture': contentPicture},\n            comments: {total: 0, commented: false},\n            shares: {total: 0, shared: false},\n            likes: {total: 0, liked: false},\n        }\n        setPost(Object.assign(post, newPost));\n        e.preventDefault();\n    }\n\n    return (\n        <div className='new-post-wrapper'>\n            <div className='post-creator-wrapper'>\n                <h2>New Post</h2>\n                <form onSubmit={e => {submitValue(e); add(post); setContentText('')}}>\n                    <label>\n                        {`Select author: `}\n                        <select value={author.name} onChange={updateAuthorValue}>\n                            {\n                                authors.map(value => (\n                                    <option value={value.name} key={value.nickname}>{value.name}</option>\n                                ))\n                            }\n                        </select>\n                    </label>\n                    <input type='text' className='picture-link user-input' value={contentPicture} onChange={updateContentPictureValue} placeholder='Image link here..'/>\n                    <textarea value={contentText} className='content-text user-input' onChange={updateContentTextValue} placeholder='Text for your post here...'/>\n                    <input className='add-post-btn' type='submit' value='ADD' disabled={contentText.length < 5}/>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nconst mapSetToProps = state => ({  \n    authors: state.map(post => post.author).reduce((acc, curr) => {\n        const nicknames = acc.map(author => author.nickname);\n        if(!nicknames.includes(curr.nickname)){\n            acc.push(curr);\n        }\n        return acc;\n    }, []),\n    totalPosts: state.length,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    add(post){\n        dispatch({ type: 'ADD_POST', post})\n    }\n})\n\nexport default connect(mapSetToProps, mapDispatchToProps)(NewPost);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRetweet, faHeart, faSignOutAlt } from '@fortawesome/free-solid-svg-icons'\nimport * as line from '@fortawesome/free-regular-svg-icons'\n\nimport './styles.css'\n\nconst PostList = ({ posts, toComment, toShare, toLike }) => {\n    return (\n        <div className='posts-wrapper' >\n            {\n                posts.map( post => (\n                    <div className='post-wrapper' key={post.id}>\n                        <div className='avatar-wrapper'>\n                            <img src={post.author.photo} style={{}}/>\n                        </div>\n                        <div className='post-body-wrapper'>\n                            <div className='author-wrapper'>\n                                <p className='author-name'>{post.author.name}</p>\n                                <p>{post.author.nickname}</p>\n                                <p>{post.date}</p>\n                            </div>\n                            <div className='content-wrapper'>\n                                <p>{post.content.text}</p>\n                                {post.content.picture && <img src={post.content.picture}/>}\n                            </div>\n                            <div className='indicators' style={{}}>\n                                <div style={{display: 'flex'}}>\n                                    <FontAwesomeIcon className='indicator-icon' size='lg' icon={line.faComment} onClick={() => toComment(post)} color= {(post.comments.commented) ? 'white' : 'grey'}/>\n                                    <span>{post.comments.total}</span>\n                                </div>\n                                <div style={{display: 'flex'}}>\n                                    <FontAwesomeIcon className='indicator-icon'  size='lg' icon={faRetweet} onClick={() => toShare(post)} color= {(post.shares.shared) ? '#1DA1F2' : 'grey'}/>\n                                    <span>{post.shares.total}</span>\n                                </div>\n                                <div style={{display: 'flex'}}>\n                                    <FontAwesomeIcon className='indicator-icon'  size='lg' icon={faHeart} onClick={() => toLike(post)} color= {(post.likes.liked) ? '#E60023' : 'gray'}/>\n                                    <span>{post.likes.total}</span>\n                                </div>\n                                <div>\n                                    <FontAwesomeIcon className='indicator-icon'  size='lg' icon={faSignOutAlt} style={{transform: 'rotate(-90deg)'}} color= 'grey'/>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                ))\n            }\n        </div>\n    )\n};\n\nconst mapStateToProps = state => ({\n    posts: state\n})\n\nconst mapDispatchToProps = dispatch => ({\n    toComment(post){\n        dispatch({ type: 'TO_COMMENT', post})\n    },\n    toShare(post){\n        dispatch({ type: 'TO_SHARE', post })\n    },\n    toLike(post){\n        dispatch({ type: 'TO_LIKE', post})\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostList);\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport store from './store'\nimport NewPost from './components/new-post/new-post';\nimport PostList from './components/post-list/post-list';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div style={{display: 'flex', flexDirection:'horizontal'}}>\n        <NewPost />\n        <PostList />        \n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}